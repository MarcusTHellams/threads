// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId        String         @id @default(uuid())
  name          String
  username      String         @unique
  email         String         @unique
  password      String
  profilePic    String?
  bio           String?
  isFrozen      Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  posts         Post[]
  replies       Reply[]
  likes         Like[]
  conversations Conversation[]
  messages      Message[]
  followedBy    User[]         @relation("UserFollows")
  following     User[]         @relation("UserFollows")
}

model Post {
  postId     String  @id @default(uuid())
  postedById String
  postedBy   User    @relation(fields: [postedById], references: [userId], onDelete: Restrict, onUpdate: Cascade)
  text       String
  img        String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  likes     Like[]
  replies   Reply[]
}

model Like {
  postId String
  userId String
  post   Post   @relation(fields: [postId], references: [postId], onDelete: Cascade, onUpdate: Cascade)
  user   User   @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([postId, userId])
}

model Reply {
  replyId String @id @default(uuid())

  text      String
  postId    String
  post      Post     @relation(fields: [postId], references: [postId])
  userId    String
  user      User     @relation(fields: [userId], references: [userId])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Conversation {
  conversationId String    @id @default(uuid())
  userId         String
  user           User[]
  messages        Message[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Message {
  messageId String @id @default(uuid())

  messageSenderId String
  messageSender   User         @relation(fields: [messageSenderId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
  conversationId  String
  conversation    Conversation @relation(fields: [conversationId], references: [conversationId], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
