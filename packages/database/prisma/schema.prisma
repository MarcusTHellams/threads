// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  username     String
  email        String   @unique
  password     String
  profilePic   String   @default("")
  followersIds String[] @db.ObjectId
  followers    User[]   @relation("UserFollows", fields: [followersIds], references: [id])
  followingIds String[] @db.ObjectId
  following    User[]   @relation("UserFollows", fields: [followingIds], references: [id])
  bio          String   @default("")
  isFrozen     Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  likedIds     String[] @db.ObjectId
  liked        Post[]   @relation("likes", fields: [likedIds], references: [id])

  replies          Reply[]
  messages         Message[]
  conversationsIds String[]       @db.ObjectId
  conversations    Conversation[] @relation(fields: [conversationsIds], references: [id])
}

model Post {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  postedById String   @db.ObjectId
  text       String
  img        String?
  likesIds   String[] @db.ObjectId
  likes      User[]   @relation("likes", fields: [likesIds], references: [id])

  repliesIds String[] @db.ObjectId
  replies    Reply[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reply {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  text           String
  userProfilePic String?
  userId         String   @db.ObjectId
  user           User     @relation(fields: [userId], references: [id])
  postId         String   @db.ObjectId
  post           Post     @relation(fields: [postId], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Conversation {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  participantsIds String[]  @db.ObjectId
  participants    User[]    @relation(fields: [participantsIds], references: [id])
  messages        Message[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Message {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  userId         String       @db.ObjectId
  sender         User         @relation(fields: [userId], references: [id])
  conversationId String       @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  seen           Boolean      @default(false)
  img            String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}
